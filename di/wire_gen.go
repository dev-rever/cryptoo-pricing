// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/dev-rever/cryptoo-pricing/internal/controller"
	"github.com/dev-rever/cryptoo-pricing/internal/db"
	"github.com/dev-rever/cryptoo-pricing/internal/middleware/jwt"
	"github.com/dev-rever/cryptoo-pricing/internal/middleware/redisutil"
	"github.com/dev-rever/cryptoo-pricing/internal/router"
	"github.com/dev-rever/cryptoo-pricing/repository"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/jackc/pgx/v5"
)

// Injectors from wire.go:

func InitApplication(ctx context.Context) (*Application, error) {
	conn, err := db.ProvideDB(ctx)
	if err != nil {
		return nil, err
	}
	userRepo := repository.ProvideUserRepo(conn)
	userController := controller.ProvideUserCtrl(userRepo)
	mRedis := redisutil.ProvideRedis()
	handlerFunc := jwt.ProvideJWTMiddleware()
	engine := router.ProvideRouter(userController, mRedis, handlerFunc)
	application := &Application{
		Router: engine,
		DB:     conn,
	}
	return application, nil
}

// wire.go:

var MiddlewareSet = wire.NewSet(jwt.ProvideJWTMiddleware, redisutil.ProvideRedis)

type Application struct {
	Router *gin.Engine
	DB     *pgx.Conn
}
